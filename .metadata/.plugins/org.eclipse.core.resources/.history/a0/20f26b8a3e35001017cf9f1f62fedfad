package jp.co.notebook.controller;

import java.util.Date;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpSession;
import jp.co.notebook.bean.UserBean;
import jp.co.notebook.entity.Note;
import jp.co.notebook.entity.User;
import jp.co.notebook.service.NoteService;
import jp.co.notebook.service.RoleService;
import jp.co.notebook.service.UserService;

@Controller
public class UserController {
	@Autowired
	RoleService roleService;
	@Autowired
	UserService userService;
	@Autowired
	NoteService noteService;
	@Autowired
	PasswordEncoder passwordEncoder;

	@RequestMapping("/register")
	public String register() {
		return "user/register";
	}

	@GetMapping("/")
	public String defaultPage() {
		return "user/login";
	}

	@GetMapping("/login")
	public String login() {
		return "user/login";
	}

	@GetMapping("/homepage")
	public String homepage(HttpSession session, Model model) {
		String email = (String) session.getAttribute("email");
		User user = this.userService.handleFindByEmail(email);
		model.addAttribute("user", user);
		model.addAttribute("notes", this.noteService.handleFindByUserOrderByIdMax5(user));
		return "user/homepage";
	}

	@GetMapping("/showAll")
	public String showAll(HttpSession session, Model model) {
		String email = (String) session.getAttribute("email");
		User user = this.userService.handleFindByEmail(email);
		model.addAttribute("user", user);
		model.addAttribute("notes", this.noteService.handleFindAllByUser(user));
		return "user/show_all";
	}

	@GetMapping("/view/{id}")
	public String viewNote(HttpSession session, @PathVariable long id, Model model) {
		if (this.noteService.checkAuthorization((String) session.getAttribute("email"), id)) {
			Note note = this.noteService.handleFindById(id);
			model.addAttribute("note", note);
			return "user/note_view";
		} else {
			return "user/error404";
		}

	}

	@GetMapping("/edit/{id}")
	public String editNote(HttpSession session, @PathVariable long id, Model model) {
		if (this.noteService.checkAuthorization((String) session.getAttribute("email"), id)) {
			Note note = this.noteService.handleFindById(id);
			model.addAttribute("note", note);
			return "user/note_edit";
		} else {
			return "user/error404";
		}
	}

	@PostMapping("/doEdit/{id}")
	public String doEdit(@PathVariable long id, @RequestParam String title, @RequestParam String note,
			HttpSession session) {
		if (this.noteService.checkAuthorization((String) session.getAttribute("email"), id)) {
			Note noteTemp = new Note();
			noteTemp.setId(id);
			noteTemp.setTitle(title);
			noteTemp.setNote(note);
			noteTemp.setNoteDate(new Date());
			noteTemp.setUser(this.noteService.handleFindById(id).getUser());
			this.noteService.handleSaveNote(noteTemp);
			return "redirect:/view/{id}";
		} else {
			return "/user/error404";
		}
	}

	@GetMapping("/delete/{id}")
	public String deleteNote(@PathVariable long id, HttpSession session) {
		if (this.noteService.checkAuthorization((String) session.getAttribute("email"), id)) {
			this.noteService.handleRemoveById(id);
			return "redirect:/homepage";
		} else {
			return "/user/error404";
		}
	}

	@PostMapping("/register")
	public String doRegister(UserBean userBean, Model model) {
		User findUser = this.userService.handleFindByEmail(userBean.getEmail());
		if (findUser == null) {
			User user = new User();
			BeanUtils.copyProperties(userBean, user);
			user.setRole(this.roleService.handleFindRoleByName("User"));
			user.setPassword(this.passwordEncoder.encode(user.getPassword()));
			this.userService.handleSaveUser(user);
			return "redirect:/login";
		} else {
			model.addAttribute("emailError", "メールが存在します。");
			return "user/register";
		}
	}

	@PostMapping("/saveNote")
	public String doSaveNote(HttpSession session, @RequestParam String title, @RequestParam String note) {
		String email = (String) session.getAttribute("email");
		User user = this.userService.handleFindByEmail(email);
		Note noteTemp = new Note();
		Date date = new Date();
		noteTemp.setUser(user);
		noteTemp.setTitle(title);
		noteTemp.setNote(note);
		noteTemp.setNoteDate(date);
		this.noteService.handleSaveNote(noteTemp);
		return "redirect:/homepage";
	}

	//	@RequestMapping(path = "/logout")
	//	public String logout(HttpSession session) {
	//		session.invalidate();
	//		return "redirect:/login";
	//	}
}
