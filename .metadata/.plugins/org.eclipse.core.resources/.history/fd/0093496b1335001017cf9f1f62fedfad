package jp.co.notebook.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.applestore.applestore.service.CustomUserDetailsService;

import jakarta.servlet.DispatcherType;
import jp.co.notebook.service.UserService;

@Configuration
@EnableMethodSecurity(securedEnabled = true)
public class WebSecurityConfig {
	@Bean
	PasswordEncoder PasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	UserDetailsService userDetailsService(UserService userService) {
		return new CustomUserDetailsService(userService);
	}

	@Bean
	DaoAuthenticationProvider authProvider(
			PasswordEncoder passwordEncoder,
			UserDetailsService userDetailsService) {
		DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
		authProvider.setUserDetailsService(userDetailsService);
		authProvider.setPasswordEncoder(passwordEncoder);
		// authProvider.setHideUserNotFoundExceptions(false);
		return authProvider;
	}

	//	@Bean
	//	AuthenticationSuccessHandler customSuccessHandler() {
	//		return new CustomSuccessHandler();
	//	}

	@Bean
	SpringSessionRememberMeServices rememberMeServices() {
		SpringSessionRememberMeServices rememberMeServices = new SpringSessionRememberMeServices();
		// optionally customize
		rememberMeServices.setAlwaysRemember(true);
		return rememberMeServices;
	}

	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
				.authorizeHttpRequests(authorize -> authorize
						.dispatcherTypeMatchers(DispatcherType.FORWARD,
								DispatcherType.INCLUDE)
						.permitAll()
						.requestMatchers("/", "/api/**", "/contact", "/product/**",
								"/login/**",
								"/client/**", "/css/**",
								"/js/**",
								"/images/**", "/signup/**", "/confirmRegister/**",
								"/success/**", "/regitrationConfirm/**",
								"/404-not-found", "/resetPassword/**")
						.permitAll()
						.requestMatchers("/admin/**")
						.hasRole("ADMIN")
						.anyRequest().authenticated())
				.sessionManagement((sessionManagement) -> sessionManagement
						.sessionCreationPolicy(SessionCreationPolicy.ALWAYS)
						.invalidSessionUrl("/logout?expired")
						.maximumSessions(1)
						.maxSessionsPreventsLogin(false))
				.logout(logout -> logout.deleteCookies("JSESSIONID").invalidateHttpSession(true))
				.rememberMe((rememberMe) -> rememberMe
						.rememberMeServices(rememberMeServices()))
				.formLogin(formLogin -> formLogin
						.loginPage("/login")
						.failureUrl("/login?error")
						.successHandler(customSuccessHandler())
						.permitAll())
				.exceptionHandling(ex -> ex.accessDeniedPage("/404-not-found"));

		return http.build();
	}
}
